//========================================================================================//  //  $File: //depot/devtech/nevis/plugin/source/open/components/converturltohyperlink/ConvertURLToHyperlink.jsx $//  //  Owner: Saurabh Deshpande//  //  $Author: pmbuilder $//  //  $DateTime: 2017/03/10 00:54:55 $//  //  $Revision: #9 $//  //  $Change: 979292 $//  //  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.//  //  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance //  with the terms of the Adobe license agreement accompanying it.  If you have received//  this file from a source other than Adobe, then your use, modification, or //  distribution of it requires the prior written permission of Adobe.//  //  //  Purpose: //  //========================================================================================#include "includes/URLToHyperlinkStrings.jsx"#include "includes/URLToHyperlinkStrings-en_US.jsx"#include "ConvertURLToHyperlinkDialog.jsx"function ConvertURLToHyperlink() {}ConvertURLToHyperlink.prototype.InitData = function() {	try {		this.myFoundItems = null;		this.currentFoundItem;		this.currentSelectionObjectIndex;				// The search strings		this.findWindowsPath = "(\\w:\\\\[\\w\\d:\\-\\\\]*)"; //Windows path prefixed with drive letter		this.findMailToURL = "(([\\w\\d]\\.?\\-?)+@([\\w\\d]+\\.)+([\\l\\u]{2,}))"; //mailto - without mailto prefix!		this.findURLWithScheme = "(((((ht|f)tp(s?))|www|afp|smb|ntp|nfs):\\/\\/)([\\w\\d\\~\\-_]+[\\.\\/])+[\\w\\d]{2,}(\\/?[\\?\\_][\\w\\d:#\\.\\$\\~_\\=\\%\\?\\-&\\+\\^\\,]+)?)";		this.findURLWithoutScheme = "([\\w\\-?]+\\.([\\w\\d-]+[\\.\\/])*[\\l\\u]{2,})";				app.findGrepPreferences = NothingEnum.nothing;		app.findChangeGrepOptions.includeFootnotes = true;		app.findChangeGrepOptions.includeHiddenLayers = true;		app.findChangeGrepOptions.includeLockedLayersForFind = false;		app.findChangeGrepOptions.includeLockedStoriesForFind = false;		app.findChangeGrepOptions.includeMasterPages = true;		var findWhat = this.findWindowsPath;		findWhat = findWhat.concat("|");		findWhat = findWhat.concat(this.findMailToURL);		findWhat = findWhat.concat("|");		findWhat = findWhat.concat(this.findURLWithScheme);		findWhat = findWhat.concat("|");		findWhat = findWhat.concat(this.findURLWithoutScheme);				app.findGrepPreferences.findWhat = findWhat;				this.currentFoundItem = null;		this.currentSelectionObjectIndex = 0;				switch (this.dialog.SelectedScope()){			case localize(urlToHyperlinkStrings.SEARCHDOCUMENTITEM):				this.myFoundItems = this.doc.findGrep().reverse();				break;			case localize(urlToHyperlinkStrings.SEARCHSTORYITEM):				switch (this.Selection[0].constructor.name){					case 'Character':					case 'Word':					case 'TextStyleRange':					case 'Line':					case 'Paragraph':					case 'TextColumn':					case 'Text':					case 'InsertionPoint':						this.currentSelectionObjectIndex++;						this.myFoundItems = this.Selection[0].parentStory.findGrep().reverse();						break;					case 'Story':					case 'TextFrame':						this.currentSelectionObjectIndex++;						this.myFoundItems = this.Selection[0].texts.item(0).findGrep().reverse();						break;					default :						alert(localize(urlToHyperlinkStrings.UNEXPECTEDSCOPEERROR, 'Story', this.Selection[0].constructor.name), localize(urlToHyperlinkStrings.INDESIGN));						break;				}				break;			case localize(urlToHyperlinkStrings.SEARCHSELECTIONITEM):				switch (this.Selection[0].constructor.name){					case 'Character':					case 'Word':					case 'TextStyleRange':					case 'Line':					case 'Paragraph':					case 'TextColumn':					case 'Text':					case 'TextFrame':						this.myFoundItems = this.Selection[0].findGrep().reverse();						this.currentSelectionObjectIndex++;						break;					default :						alert(localize(urlToHyperlinkStrings.UNEXPECTEDSCOPEERROR, 'Selection', this.Selection[0].constructor.name), localize(urlToHyperlinkStrings.INDESIGN));						break;				}		}	} catch (x) {		assert(false, 'Caught in InitData : ' + x);	}}ConvertURLToHyperlink.prototype.Findbtnclickevent  = function() {	try {		if ((this.myFoundItems != null) && (this.myFoundItems.length == 0) && (this.currentSelectionObjectIndex < this.Selection.length) && (this.dialog.SelectedScope() != localize(urlToHyperlinkStrings.SEARCHDOCUMENTITEM)) ) {			this.GetNextTextSelection();		}		var exists = true;		this.currentFoundItem = null;		if ((this.myFoundItems != null) && (this.myFoundItems.length > 0)) {			this.currentFoundItem = this.myFoundItems.pop();			var exists = this.CheckSourceHyperlinkExists(this.currentFoundItem);			while ((exists) && (this.myFoundItems.length > 0)) {				this.currentFoundItem = this.myFoundItems.pop();				exists = this.CheckSourceHyperlinkExists(this.currentFoundItem);			}			if (!exists) {				SetCurrentScopes.canChangeScopes = false;				this.doc.select(this.currentFoundItem);				this.currentFoundItem.showText();				this.dialog.SetFindNextButtonText();				// Refer bug #2396633 and #2421430, it seems that the onSelectionChange event (after showText()) 				// is dispatched after 250 ms. Hence, we cannot let "canChangeScopes" change its value until then.				var counter = 0;				while (SetCurrentScopes.canChangeScopes == false && counter < 10)				{					IdleCPU(250);					counter++;				}				SetCurrentScopes.canChangeScopes = true;			} 		}		if(exists) {			alert(localize(urlToHyperlinkStrings.FINISHEDFINDINGMESSAGE), localize(urlToHyperlinkStrings.INDESIGN));			this.InitData();			this.dialog.SetFindButtonText();		}	} catch (x) {		assert(false, 'Caught in FindBtnClickEvent : ' + x);	}}function IdleCPU(millis){	var date = new Date();	var curDate = null;	do { curDate = new Date(); }	while(curDate-date < millis);} ConvertURLToHyperlink.prototype.GetNextTextSelection = function() {	try {		var textSelectedFound = false;		while (!textSelectedFound && (this.currentSelectionObjectIndex < this.Selection.length)) {				switch (this.Selection[this.currentSelectionObjectIndex].constructor.name){				case 'Character':				case 'Word':				case 'TextStyleRange':				case 'Line':				case 'Paragraph':				case 'TextColumn':				case 'TextFrame':				case 'Story':					if (this.Selection[this.currentSelectionObjectIndex].texts.item(0).length > 0)						this.myFoundItems = this.Selection[this.currentSelectionObjectIndex].texts.item(0).findGrep().reverse();					textSelectedFound = true;					break;				case 'Text':					if (this.Selection[this.currentSelectionObjectIndex].length > 0)						this.myFoundItems = this.Selection[this.currentSelectionObjectIndex].findGrep().reverse();					textSelectedFound = true;					break;				default:					break;			}			this.currentSelectionObjectIndex++;		}	} catch (x) {		assert(false, 'Caught in GetNextTextSelection : ' + x);	}}ConvertURLToHyperlink.prototype.CheckSourceHyperlinkExists = function(text) {	try {		if(text.findHyperlinks(RangeSortOrder.NO_SORT).length > 0)			return true;		else			return false;	} catch(x) {		return true;	}}ConvertURLToHyperlink.prototype.Convertbtnclickevent  = function() {	try {		if ( this.currentFoundItem != null) {			app.doScript('this.AddHyperlink()', undefined, undefined, UndoModes.entireScript);			this.currentFoundItem = null;		}	} catch (x) {		assert(false, 'Caught in Convertbtnclickevent : ' + x);	}}ConvertURLToHyperlink.prototype.Donebtnclickevent  = function() {		this.dialog.close();}ConvertURLToHyperlink.prototype.onCloseEvent = function() {	try {		app.removeEventListener('afterSelectionChanged', SetCurrentScopes);		this.doc.removeEventListener( 'beforeClose', BeforeDocCloseEvent);		this.dialogOpen = false;	} catch (x) {	}}ConvertURLToHyperlink.prototype.AddHyperlink = function() {	var document = this.doc;	var text = this.currentFoundItem;	var source = null;	var destination = null;	var hyperlink = null;	try {		source = document.hyperlinkTextSources.add(text);		var destinationType = -1;		if (destinationType == -1)		{			app.findGrepPreferences.findWhat = this.findWindowsPath;			if(text.findGrep().length > 0)				destinationType = 1;		}		if (destinationType == -1)		{			app.findGrepPreferences.findWhat = this.findMailToURL;			if(text.findGrep().length > 0)				destinationType = 3;		}		if (destinationType == -1)		{			app.findGrepPreferences.findWhat = this.findURLWithScheme;			if(text.findGrep().length > 0)				destinationType = 2;		}		if (destinationType == -1)		{			app.findGrepPreferences.findWhat = this.findURLWithoutScheme;			if(text.findGrep().length > 0)				destinationType = 4;		}		var findWhat = this.findWindowsPath;		findWhat = findWhat.concat("|");		findWhat = findWhat.concat(this.findMailToURL);		findWhat = findWhat.concat("|");		findWhat = findWhat.concat(this.findURLWithScheme);		findWhat = findWhat.concat("|");		findWhat = findWhat.concat(this.findURLWithoutScheme);		app.findGrepPreferences.findWhat = findWhat;		if (destinationType == 3)		{			var destText = "mailto:" + text.contents;			destination = document.hyperlinkURLDestinations.itemByName(destText);			if ( destination == null) {				destination = document.hyperlinkURLDestinations.add(destText, {name:destText});			}		}		else if (destinationType == 4)		{			var destText = "http://" + text.contents;			destination = document.hyperlinkURLDestinations.itemByName(destText);			if ( destination == null) {				destination = document.hyperlinkURLDestinations.add(destText, {name:destText});			}		}		else		{			destination = document.hyperlinkURLDestinations.itemByName(text.contents);			if ( destination == null) {				destination = document.hyperlinkURLDestinations.add(text.contents, {name:text.contents});			}		}				hyperlink = document.hyperlinks.add(source, destination);		this.ApplyCharacterStyle(document, source);	} catch(x) {		assert(false, 'Caught in AddHyperlink : ' + x);		if (source != null)			source.remove();		if (destination != null)			destination.remove();		if (hyperlink != null)			hyperlink.remove();	}}ConvertURLToHyperlink.prototype.ApplyCharacterStyle = function(document, source) {	if(this.dialog.characterStyleToSet())		if(this.dialog.CharStyleCount() > 0)		{			var selectedStyle = this.dialog.SelectedStyle();			for (var i=0 ; i < document.characterStyles.length ; i++)				if (selectedStyle == document.characterStyles[i].name) {					source.sourceText.applyCharacterStyle(document.characterStyles[i]);					break;				}		}}ConvertURLToHyperlink.prototype.AddCharacterStyle = function() {//		app.menuActions.itemByName('New Character Style...' ).invoke() ;		app.menuActions.itemByID( 0x2100 + 14 ).invoke();}ConvertURLToHyperlink.prototype.Convertallbtnclickevent = function() {	try	{		this.InitData();		var numberURLsConverted = 0;				if (this.dialog.SelectedScope() == localize(urlToHyperlinkStrings.SEARCHDOCUMENTITEM))		{			while (this.myFoundItems.length > 0) {				this.currentFoundItem = this.myFoundItems.pop();				var exists = this.CheckSourceHyperlinkExists(this.currentFoundItem);				if (!exists)				{					app.doScript('this.AddHyperlink()', undefined, undefined, UndoModes.entireScript);					numberURLsConverted++;				}			}			this.currentFoundItem = null;		}		else {			while ((this.myFoundItems.length > 0) || (this.currentSelectionObjectIndex < this.Selection.length) ) {				if ((this.myFoundItems.length == 0) && (this.currentSelectionObjectIndex < this.Selection.length) ) {					this.GetNextTextSelection();				}				this.currentFoundItem = null;				if (this.myFoundItems.length > 0) {					this.currentFoundItem = this.myFoundItems.pop();					var exists = this.CheckSourceHyperlinkExists(this.currentFoundItem);					if (!exists)					{						app.doScript('this.AddHyperlink()', undefined, undefined, UndoModes.entireScript);						numberURLsConverted++;					}				}			}		}		alert(localize(urlToHyperlinkStrings.CONVERTALLFINISHEDMESSAGE, numberURLsConverted), localize(urlToHyperlinkStrings.INDESIGN));	} catch(x) {		this.currentFoundItem = null;		assert(false, 'Caught in Convertallbtnclickevent : ' + x);	}}function BeforeDocCloseEvent() {	obj.dialog.close();}function SetCurrentScopes() {	try {		var currentSelection = app.selection;		if (SetCurrentScopes.canChangeScopes == false)		{			SetCurrentScopes.canChangeScopes = true; 			return;		}		if((currentSelection.length == 0) ||			(currentSelection[0].constructor.name != 'Text') || 			(typeof(obj.currentFoundItem) == "undefined") ||			(obj.currentFoundItem == null) ||			(obj.currentFoundItem.contents != currentSelection[0].contents))		{			var possibleScopes = new Array(localize(urlToHyperlinkStrings.SEARCHDOCUMENTITEM));			if (currentSelection.length > 0)			{				switch (currentSelection[0].constructor.name){					case 'InsertionPoint':					case 'Story':					case 'TextFrame':						possibleScopes[1] = localize(urlToHyperlinkStrings.SEARCHSTORYITEM);						break;					case 'Character':					case 'Word':					case 'TextStyleRange':					case 'Line':					case 'Paragraph':					case 'TextColumn':					case 'Text':						possibleScopes[1] = localize(urlToHyperlinkStrings.SEARCHSTORYITEM);						possibleScopes[2] = localize(urlToHyperlinkStrings.SEARCHSELECTIONITEM);						break;					default:						break;				}			}			obj.dialog.InitScopeDL(possibleScopes, obj);		//	obj.InitData();  // uncommenting this will grep the urls on selectionChange event like typing. But, this will start the matching right from the first url (we don't have a way to tell grep to start from a particular		//	location except to iterate the matches in the javascipt), so it's not very useful.		}	} catch(x) {		assert(false, 'Caught in SetCurrentScopes : ' + x);		SetCurrentScopes.canChangeScopes = true;	}}ConvertURLToHyperlink.prototype.RunDialog  = function(){	try {		this.activeApp = app;		this.doc = this.activeApp.documents.item(0);		this.Selection = app.selection;				// try to load localized strings 		if ($.locale != 'en_US') 		{ 			script = ConvertURLToHyperlinkMenuItem.loadScript('Resources/URLToHyperlinkStrings-' + $.locale + '.jsxbin'); 			if ( !script.exists )			{				script = ConvertURLToHyperlinkMenuItem.loadScript('Resources/URLToHyperlinkStrings-' + $.locale + '.jsx'); 			}			assert( script.exists, 'Resources/URLToHyperlinkStrings-' + $.locale + '.jsx* missing; load failed' ) ; 			if ( script.exists ) 			{				var cacheCurrent = Folder.current ; 				try 				{ 					Folder.current = Folder( ConvertURLToHyperlinkMenuItem.scriptsFolder + '/Resources' ) ; 					app.doScript( script ) ; 				}				catch (x) {					assert(false, x);				}				finally 				{ 					Folder.current = cacheCurrent ; 				} 			} 		}				this.dialog = new ConvertURLToHyperlinkDialog();		this.dialog.InitDialog(this.doc.characterStyles);		this.dialogOpen = true;		SetCurrentScopes.disableSelectionChangeEvent = false;		app.eventListeners.add( "afterSelectionChanged", SetCurrentScopes);		this.doc.eventListeners.add( "beforeClose", BeforeDocCloseEvent);		SetCurrentScopes.canChangeScopes = true;		SetCurrentScopes();		this.InitData(this.doc);		this.dialog.BindDialogEvents(this.Findbtnclickevent, this.Convertbtnclickevent, this.ConvertAllbtnclickevent, this.Donebtnclickevent, obj);	} catch(x) {		assert(false, 'Caught in RunDialog : ' + x);	}}